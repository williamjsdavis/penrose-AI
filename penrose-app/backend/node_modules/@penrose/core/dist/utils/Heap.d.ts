/**
 * The MIT License (MIT)

 * Copyright (c) 2020 Eyas Ranjous <eyas.ranjous@gmail.com>

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Adapted from https://github.com/datastructures-js/heap/blob/master/src/heap.js
 * to allow increasing node priority by adding a node_to_index map
 *
 */
export interface ICompare<T> {
    (a: T, b: T): number;
}
export default class Heap<T> {
    private compare;
    private nodes;
    private leaf;
    private node_to_index;
    /**
     * @param {function} compare
     */
    constructor(compare: ICompare<T>, nodes?: T[]);
    /**
     * Converts the heap to a cloned array without sorting.
     * @public
     * @returns {Array}
     */
    toArray(): T[];
    /**
     * Checks if a parent has a left child
     * @private
     */
    private hasLeftChild;
    /**
     * Checks if a parent has a right child
     * @private
     */
    private hasRightChild;
    /**
     * Compares two nodes
     * @private
     */
    private compareAt;
    /**
     * Swaps two nodes in the heap
     * @private
     */
    private swap;
    /**
     * Checks if parent and child should be swapped
     * @private
     */
    private shouldSwap;
    /**
     * Compares children of a parent
     * @private
     */
    private compareChildrenOf;
    /**
     * Compares two children before a position
     * @private
     */
    private compareChildrenBefore;
    /**
     * Recursively bubbles up a node if it's in a wrong position
     * @private
     */
    private heapifyUp;
    /**
     * Recursively bubbles down a node if it's in a wrong position
     * @private
     */
    private heapifyDown;
    /**
     * Recursively bubbles down a node before a given index
     * @private
     */
    heapifyDownUntil(index: number): void;
    /**
     * Inserts a new value into the heap
     * @public
     * @param {number|string|object} value
     * @returns {Heap}
     */
    insert(value: T): Heap<T>;
    /**
     * Removes and returns the root node in the heap
     * @public
     * @returns {number|string|object}
     */
    extractRoot(): T | undefined;
    increase_priority(node: T): void;
    /**
     * Applies heap sort and return the values sorted by priority
     * @public
     * @returns {array}
     */
    sort(): T[];
    /**
     * Fixes node positions in the heap
     * @public
     * @returns {Heap}
     */
    fix(): Heap<T>;
    /**
     * Verifies that all heap nodes are in the right position
     * @public
     * @returns {boolean}
     */
    isValid(): boolean;
    /**
     * Returns the root node in the heap
     * @public
     * @returns {number|string|object}
     */
    root(): T | undefined;
    /**
     * Returns a leaf node in the heap
     * @public
     * @returns {number|string|object}
     */
    getLeaf(): T | undefined;
    /**
     * Returns the number of nodes in the heap
     * @public
     * @returns {number}
     */
    size(): number;
    /**
     * Checks if the heap is empty
     * @public
     * @returns {boolean}
     */
    isEmpty(): boolean;
    /**
     * Clears the heap
     * @public
     */
    clear(): void;
    /**
     * Builds a heap from a array of values
     * @public
     * @static
     * @param {array} values
     * @param {function} compare
     * @returns {Heap}
     */
    static heapify<T>(values: T[], compare: ICompare<T>): Heap<T>;
    /**
     * Checks if a list of values is a valid heap
     * @public
     * @static
     * @param {array} values
     * @param {function} compare
     * @returns {boolean}
     */
    static isHeapified<T>(values: T[], compare: ICompare<T>): boolean;
}
//# sourceMappingURL=Heap.d.ts.map