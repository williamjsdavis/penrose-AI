import _ from "lodash";
import { isConcrete } from "../engine/EngineUtils.js";
import { valueTypeDesc, } from "../types/types.js";
//#region general
export const cartesianProduct = (t1, t2, consistent, merge) => {
    const product = [];
    for (const i in t1) {
        for (const j in t2) {
            if (consistent(t1[i], t2[j])) {
                product.push(merge(t1[i], t2[j]));
            }
        }
    }
    return product;
};
/**
 * Compute the combinations of pairs
 */
export const combinations2 = (list) => list.reduce((acc, elem, index) => {
    const rest = list.slice(index + 1);
    const newElems = rest.map((elem1) => [elem, elem1]);
    return [...acc, ...newElems];
}, []);
/**
 * Safe wrapper for any function that might return `undefined`.
 * @borrows https://stackoverflow.com/questions/54738221/typescript-array-find-possibly-undefind
 * @param argument Possible unsafe function call
 * @param message Error message
 */
export const safe = (argument, message) => {
    if (argument === undefined) {
        throw new TypeError(message);
    }
    return argument;
};
// Repeat `x`, `i` times
export const repeat = (i, x) => {
    const xs = [];
    for (let j = 0; j < i; j++) {
        xs.push(x);
    }
    return xs;
};
export const all = (xs) => xs.reduce((prev, curr) => prev && curr, true);
/**
 * Like _.zip but throws on different length instead of padding with undefined.
 */
export const zip2 = (a1, a2) => {
    const l = a1.length;
    if (l !== a2.length) {
        throw Error(`can't zip2 vectors of different length: ${a1.length} vs ${a2.length}`);
    }
    const a = [];
    for (let i = 0; i < l; i++) {
        a.push([a1[i], a2[i]]);
    }
    return a;
};
/**
 * Like _.zip but throws on different length instead of padding with undefined.
 */
export const zip3 = (a1, a2, a3) => {
    const l = a1.length;
    if (l !== a2.length || l !== a3.length) {
        throw Error(`can't zip3 vectors of different length: ${a1.length} vs ${a2.length} vs ${a3.length}`);
    }
    const a = [];
    for (let i = 0; i < l; i++) {
        a.push([a1[i], a2[i], a3[i]]);
    }
    return a;
};
// https://stackoverflow.com/a/70811091
/** returns whether `key` is in `obj`, in a way that informs TypeScript */
export const isKeyOf = (key, obj) => key in obj;
//#endregion
//#region random
const RAND_RANGE = 100;
/**
 * Generate a random float. The maximum is exclusive and the minimum is inclusive
 * @param min minimum (inclusive)
 * @param max maximum (exclusive)
 */
export const randFloats = (rng, count, [min, max]) => _.times(count, () => randFloat(rng, min, max));
/**
 * Generate a random float. The maximum is exclusive and the minimum is inclusive
 * @param min minimum (inclusive)
 * @param max maximum (exclusive)
 */
export const randFloat = (rng, min, max) => {
    // TODO: better error reporting
    console.assert(max > min, "min should be smaller than max for random number generation!");
    return rng() * (max - min) + min;
};
export const randList = (rng, n) => {
    return repeat(n, 0).map(() => RAND_RANGE * (rng() - 0.5));
};
export const arrowheads = {
    concave: {
        width: 8,
        height: 8,
        viewbox: "0 0 8 8",
        refX: 2.5,
        refY: 4,
        path: "M0,0 A30,30,0,0,0,8,4 A30,30,0,0,0,0,8 L2.5,4 z",
        fillKind: "fill",
    },
    straight: {
        width: 9.95,
        height: 8.12,
        viewbox: "0 0 9.95 8.12",
        refX: 2.36,
        refY: 4.06,
        path: "M9.95 4.06 0 8.12 2.36 4.06 0 0 9.95 4.06z",
        fillKind: "fill",
    },
    perp: {
        width: 1,
        height: 10.15,
        viewbox: "0 0 1 10.2",
        refX: 0.5,
        refY: 5.08,
        path: "M0.5 10.2 0.5 0",
        fillKind: "stroke",
    },
    line: {
        width: 7.5,
        height: 14,
        viewbox: "0 0 7.5 14",
        refX: 5,
        refY: 7,
        path: "M 7 7 a -6 6.75 0 0 1 -6 -6 M 7 7 a -6 6.75 0 0 0 -6 6",
        fillKind: "stroke",
        style: {
            "stroke-linecap": "round",
        },
    },
    doubleLine: {
        width: 12.5,
        height: 14,
        viewbox: "0 0 12.5 14",
        refX: 5,
        refY: 7,
        path: "M 7 7 a -6 6.75 0 0 1 -6 -6 M 7 7 a -6 6.75 0 0 0 -6 6 M 12 7 a -6 6.75 0 0 1 -6 -6 M 7 7 L 12 7 M 12 7 a -6 6.75 0 0 0 -6 6",
        fillKind: "stroke",
        style: {
            "stroke-linecap": "round",
        },
    },
    loopup: {
        width: 6,
        height: 28,
        viewbox: "0 0 6 28",
        refX: 1,
        refY: 10,
        path: "M1 10 a 4 4 0 0 1 0 9",
        fillKind: "stroke",
        style: {
            "stroke-linecap": "round",
        },
    },
    loopdown: {
        width: 6,
        height: 28,
        viewbox: "0 0 6 28",
        refX: 1,
        refY: 10,
        path: "M1 1 a 4 4 0 0 1 0 9",
        fillKind: "stroke",
        style: {
            "stroke-linecap": "round",
        },
    },
    loop: {
        width: 6,
        height: 28,
        viewbox: "0 0 6 28",
        refX: 1,
        refY: 10,
        path: "M1 10 a 4 4 0 0 1 0 9 M1 1 a 4 4 0 0 1 0 9",
        fillKind: "stroke",
        style: {
            "stroke-linecap": "round",
        },
    },
};
export const getArrowhead = (style) => {
    if (style in arrowheads) {
        const arrow = arrowheads[style];
        return arrow;
    }
};
export const toScreen = ([x, y], canvasSize) => {
    const [width, height] = canvasSize;
    return [width / 2 + x, height / 2 - y];
};
//#endregion
//#region color
export const hexToRgba = (hex) => {
    const parseIntHex = (value) => {
        return parseInt(value, 16);
    };
    const isThree = hex.length === 3;
    const isFour = hex.length === 4;
    const isSix = hex.length === 6;
    const isEight = hex.length === 8;
    if (!isThree && !isFour && !isSix && !isEight) {
        return undefined;
    }
    let r = 0;
    let g = 0;
    let b = 0;
    let a = 255; // NOTE: alpha defaults to 255
    switch (hex.length) {
        case 3: {
            r = parseIntHex(hex.slice(0, 1).repeat(2));
            g = parseIntHex(hex.slice(1, 2).repeat(2));
            b = parseIntHex(hex.slice(2, 3).repeat(2));
            break;
        }
        case 4: {
            r = parseIntHex(hex.slice(0, 1).repeat(2));
            g = parseIntHex(hex.slice(1, 2).repeat(2));
            b = parseIntHex(hex.slice(2, 3).repeat(2));
            a = parseIntHex(hex.slice(3, 4).repeat(2));
            break;
        }
        case 6: {
            r = parseIntHex(hex.slice(0, 2));
            g = parseIntHex(hex.slice(2, 4));
            b = parseIntHex(hex.slice(4, 6));
            break;
        }
        case 8: {
            r = parseIntHex(hex.slice(0, 2));
            g = parseIntHex(hex.slice(2, 4));
            b = parseIntHex(hex.slice(4, 6));
            a = parseIntHex(hex.slice(6, 8));
            break;
        }
    }
    return [r / 255, g / 255, b / 255, a / 255];
};
export const rgbToHex = (color) => {
    return color.reduce((prev, cur) => {
        const hex = toHexDigit(cur);
        const padded = hex.length === 1 ? "0" + hex : hex;
        return prev + padded;
    }, "#");
};
export const rgbaToHex = (color) => {
    return color.reduce((prev, cur) => {
        const hex = toHexDigit(cur);
        const padded = hex.length === 1 ? "0" + hex : hex;
        return prev + padded;
    }, "#");
};
const toHexDigit = (n) => {
    return Math.round(255 * n).toString(16);
};
// TODO nest this
const hsv2rgb = (r1, g1, b1, m) => {
    return [r1 + m, g1 + m, b1 + m];
};
// Expects H as angle in degrees, S in [0,100], L in [0,100] and converts the latter two to fractions.
// Returns rgb in range [0, 1]
// From https://github.com/d3/d3-hsv/blob/master/src/hsv.js
export const hsvToRGB = (hsv) => {
    const [h0, s0, v0] = hsv;
    const h = isNaN(h0) ? 0 : (h0 % 360) + Number(h0 < 0) * 360;
    const s = isNaN(h0) || isNaN(s0) ? 0 : s0 / 100.0;
    const v = v0 / 100.0;
    const c = v * s;
    const x = c * (1 - Math.abs(((h / 60) % 2) - 1));
    const m = v - c;
    return h < 60
        ? hsv2rgb(c, x, 0, m)
        : h < 120
            ? hsv2rgb(x, c, 0, m)
            : h < 180
                ? hsv2rgb(0, c, x, m)
                : h < 240
                    ? hsv2rgb(0, x, c, m)
                    : h < 300
                        ? hsv2rgb(x, 0, c, m)
                        : hsv2rgb(c, 0, x, m);
};
export const toSvgPaintProperty = (color) => {
    switch (color.tag) {
        case "RGBA":
            return rgbToHex([
                color.contents[0],
                color.contents[1],
                color.contents[2],
            ]);
        case "HSVA":
            return rgbToHex(hsvToRGB([color.contents[0], color.contents[1], color.contents[2]]));
        case "NONE":
            return "none";
    }
};
export const toSvgOpacityProperty = (color) => {
    switch (color.tag) {
        case "RGBA":
            return color.contents[3];
        case "HSVA":
            return color.contents[3];
        case "NONE":
            return 1;
    }
};
//#endregion
//#region numerical
const TOL = 1e-3;
export const round2 = (n) => roundTo(n, 2);
// https://stackoverflow.com/questions/15762768/javascript-math-round-to-two-decimal-places
// Ported so string conversion works in typescript...
export const roundTo = (n, digits) => {
    let negative = false;
    if (n < 0) {
        negative = true;
        n = n * -1;
    }
    const multiplicator = Math.pow(10, digits);
    const nNum = parseFloat((n * multiplicator).toFixed(11));
    const n2 = parseFloat((Math.round(nNum) / multiplicator).toFixed(2));
    let n3 = n2;
    if (negative) {
        n3 = parseFloat((n2 * -1).toFixed(2));
    }
    return n3;
};
export const normList = (xs) => Math.sqrt(_.sum(xs.map((e) => e * e)));
export const eqNum = (x, y) => {
    return Math.abs(x - y) < TOL;
};
export const eqList = (xs, ys) => {
    if (xs.length !== ys.length)
        return false;
    //   _.every(_.zip(xs, ys), e => eqNum(e[0], e[1]));
    // let xys = _.zip(xs, ys);
    // return xys?.every(e => e ? Math.abs(e[1] - e[0]) < TOL : false) ?? false;
    // Typescript won't pass this code no matter how many undefined-esque checks I put in??
    for (let i = 0; i < xs.length; i++) {
        if (!eqNum(xs[i], ys[i]))
            return false;
    }
    return true;
};
//#endregion
//#region geometry
// calculates bounding box dimensions of a shape - used in inspector views
export const bBoxDims = (shape) => {
    let [w, h] = [0, 0];
    if (shape.shapeType === "Circle") {
        [w, h] = [shape.r.contents * 2, shape.r.contents * 2];
    }
    else if (shape.shapeType === "Ellipse") {
        [w, h] = [shape.rx.contents * 2, shape.ry.contents * 2];
    }
    else if (shape.shapeType === "Line") {
        const [[sx, sy], [ex, ey]] = [shape.start.contents, shape.end.contents];
        const padding = 50; // Because arrow may be horizontal or vertical, and we don't want the size to be zero in that case
        [w, h] = [
            Math.max(Math.abs(ex - sx), padding),
            Math.max(Math.abs(ey - sy), padding),
        ];
    }
    else if (shape.shapeType === "Path") {
        [w, h] = [20, 20]; // TODO: find a better measure for this... check with max?
    }
    else if (shape.shapeType === "Polygon") {
        [w, h] = [20, 20]; // TODO: find a better measure for this... check with max?
    }
    else if (shape.shapeType === "Polyline") {
        [w, h] = [20, 20]; // TODO: find a better measure for this... check with max?
    }
    else if ("width" in shape && "height" in shape) {
        [w, h] = [shape.width.contents, shape.height.contents];
    }
    else {
        [w, h] = [20, 20];
    }
    return [w, h];
};
export const scalev = (c, xs) => _.map(xs, (x) => c * x);
export const addv = (xs, ys) => {
    if (xs.length !== ys.length) {
        console.error("xs", xs, "ys", ys);
        throw Error(`can't add vectors of different length: ${xs.length} vs ${ys.length}`);
    }
    return _.zipWith(xs, ys, (x, y) => x + y);
};
export const subv = (xs, ys) => {
    if (xs.length !== ys.length) {
        console.error("xs", xs, "ys", ys);
        throw Error(`can't sub vectors of different length: ${xs.length} vs ${ys.length}`);
    }
    return _.zipWith(xs, ys, (x, y) => x - y);
};
export const negv = (xs) => _.map(xs, (e) => -e);
export const dot = (xs, ys) => {
    if (xs.length !== ys.length) {
        console.error("xs", xs, "ys", ys);
        throw Error(`can't dot vectors of different length: ${xs.length} vs ${ys.length}`);
    }
    let acc = 0;
    for (let i = 0; i < xs.length; i++) {
        acc += xs[i] * ys[i];
    }
    return acc;
};
//#endregion
//#region Value
export const floatV = (contents) => ({
    tag: "FloatV",
    contents,
});
export const boolV = (contents) => ({
    tag: "BoolV",
    contents,
});
export const strV = (contents) => ({
    tag: "StrV",
    contents,
});
export const pathDataV = (contents) => ({
    tag: "PathDataV",
    contents,
});
export const ptListV = (contents) => ({
    tag: "PtListV",
    contents,
});
export const colorV = (contents) => ({
    tag: "ColorV",
    contents,
});
export const listV = (contents) => ({
    tag: "ListV",
    contents,
});
export const vectorV = (contents) => ({
    tag: "VectorV",
    contents,
});
export const matrixV = (contents) => ({
    tag: "MatrixV",
    contents,
});
export const tupV = (contents) => ({
    tag: "TupV",
    contents,
});
export const llistV = (contents) => ({
    tag: "LListV",
    contents,
});
export const shapeListV = (contents) => ({
    tag: "ShapeListV",
    contents,
});
export const black = () => colorV({ tag: "RGBA", contents: [0, 0, 0, 1] });
export const white = () => colorV({ tag: "RGBA", contents: [1, 1, 1, 1] });
export const noPaint = () => colorV({ tag: "NONE" });
export const clipDataV = (contents) => ({
    tag: "ClipDataV",
    contents,
});
export const noClip = () => ({
    tag: "NoClip",
});
export const clipShape = (contents) => {
    if (contents.shapeType === "Group") {
        throw new Error("Cannot use a Group shape as clip path");
    }
    return {
        tag: "Clip",
        contents,
    };
};
//#endregion
//#region Type
export const describeType = (t) => {
    if (t.tag === "ValueT") {
        return valueTypeDesc[t.type];
    }
    else if (t.tag === "ShapeT") {
        if (t.type === "AnyShape") {
            return {
                description: "Any Shape",
                symbol: "Shape",
            };
        }
        else {
            return { description: t.type + " Shape", symbol: t.type + "Shape" };
        }
    }
    else {
        const descs = t.types.map(describeType);
        const descriptions = descs.map((d) => d.description);
        const symbols = descs.map((d) => d.symbol);
        return {
            description: "any of: " + descriptions.join(", or "),
            symbol: symbols.join(" | "),
        };
    }
};
export const valueT = (type) => ({
    tag: "ValueT",
    type,
});
export const real2T = () => valueT("Real2");
export const real3T = () => valueT("Real3");
export const realT = () => valueT("Real");
export const unitT = () => valueT("Unit");
export const realNT = () => valueT("RealN");
export const natT = () => valueT("Nat");
export const pathCmdT = () => valueT("PathCmd");
export const colorT = () => valueT("Color");
export const pathTypeT = () => valueT("PathType");
export const colorTypeT = () => valueT("ColorType");
export const real2NT = () => valueT("Real2N");
export const stringT = () => valueT("String");
export const posIntT = () => valueT("PosInt");
export const booleanT = () => valueT("Boolean");
export const realNMT = () => valueT("RealNM");
export const shapeListT = () => valueT("ShapeList");
export const shapeT = (type) => ({
    tag: "ShapeT",
    type,
});
export const unionT = (...types) => ({
    tag: "UnionT",
    types,
});
export const rectlikeT = () => unionT(shapeT("Equation"), shapeT("Image"), shapeT("Rectangle"), shapeT("Text"));
//#endregion
//#region Style
export const resolveRhsName = ({ block, subst, locals }, name) => {
    const { value } = name.contents;
    switch (name.tag) {
        case "StyVar": {
            if (locals.has(value)) {
                // locals shadow selector match names
                return { tag: "Local", block, name: value };
            }
            else if (subst.tag === "StySubSubst" && value in subst.contents) {
                // selector match names shadow globals
                return { tag: "Substance", block, name: subst.contents[value] };
            }
            else if (subst.tag === "CollectionSubst" && value in subst.groupby) {
                return { tag: "Substance", block, name: subst.groupby[value] };
            }
            else {
                // couldn't find it in context, must be a glboal
                return { tag: "Global", block, name: value };
            }
        }
        case "SubVar": {
            return { tag: "Substance", block, name: value };
        }
    }
};
const resolveRhsPath = (p) => {
    const { name, members } = p.expr; // drop `indices`
    return { ...resolveRhsName(p.context, name), members };
};
const blockPrefix = ({ tag, contents }) => {
    switch (tag) {
        case "LocalVarId": {
            const [i, j] = contents;
            return `${i}:${j}:`;
        }
        case "NamespaceId": {
            // locals in a global block point to globals
            return `${contents}.`;
        }
    }
};
const prettyPrintResolvedName = ({ tag, block, name, }) => {
    switch (tag) {
        case "Global": {
            return name;
        }
        case "Local": {
            return `${blockPrefix(block)}${name}`;
        }
        case "Substance": {
            return `\`${name}\``;
        }
    }
};
export const prettyPrintResolvedPath = (p) => [prettyPrintResolvedName(p), ...p.members.map((m) => m.value)].join(".");
const prettyPrintBindingForm = (bf) => {
    switch (bf.tag) {
        case "StyVar": {
            return bf.contents.value;
        }
        case "SubVar": {
            return `\`${bf.contents.value}\``;
        }
    }
};
export const prettyPrintPath = (p) => {
    const base = [
        prettyPrintBindingForm(p.name),
        ...p.members.map((m) => m.value),
    ].join(".");
    const indices = p.indices.map((i) => `[${prettyPrintExpr(i, prettyPrintPath)}]`);
    return [base, ...indices].join("");
};
export const prettyPrintExpr = (arg, ppPath) => {
    // TODO: only handles paths and floats for now; generalize to other exprs
    if (arg.tag === "Path") {
        return ppPath(arg);
    }
    else if (arg.tag === "Fix") {
        const val = arg.contents;
        return String(val);
    }
    else if (arg.tag === "CompApp") {
        const [fnName, fnArgs] = [arg.name.value, arg.args];
        return [
            fnName,
            "(",
            ...fnArgs.map((arg) => prettyPrintExpr(arg, ppPath)).join(", "),
            ")",
        ].join("");
    }
    else if (arg.tag === "UOp") {
        let uOpName;
        switch (arg.op) {
            case "UMinus":
                uOpName = "-";
                break;
        }
        return "(" + uOpName + prettyPrintExpr(arg.arg, ppPath) + ")";
    }
    else if (arg.tag === "BinOp") {
        let binOpName;
        switch (arg.op) {
            case "BPlus":
                binOpName = "+";
                break;
            case "BMinus":
                binOpName = "-";
                break;
            case "Multiply":
                binOpName = "*";
                break;
            case "Divide":
                binOpName = "/";
                break;
            case "Exp":
                binOpName = "**";
                break;
        }
        return ("(" +
            prettyPrintExpr(arg.left, ppPath) +
            " " +
            binOpName +
            " " +
            prettyPrintExpr(arg.right, ppPath) +
            ")");
    }
    else {
        // TODO: Finish writing pretty-printer for rest of expressions
        const res = JSON.stringify(arg);
        return res;
    }
};
export const prettyPrintFn = (fn) => {
    const body = fn.ast.expr.body;
    if (body.tag === "FunctionCall") {
        const name = body.name.value;
        const args = body.args
            .map((arg) => prettyPrintExpr(arg, (p) => prettyPrintResolvedPath(resolveRhsPath({ context: fn.ast.context, expr: p }))))
            .join(", ");
        return [name, "(", args, ")"].join("");
    }
    else {
        const { op, arg1, arg2 } = body;
        const ppArg1 = prettyPrintExpr(arg1, (p) => prettyPrintResolvedPath(resolveRhsPath({ context: fn.ast.context, expr: p })));
        const ppArg2 = prettyPrintExpr(arg2, (p) => prettyPrintResolvedPath(resolveRhsPath({ context: fn.ast.context, expr: p })));
        return ppArg1 + " " + op.op + " " + ppArg2;
    }
};
//#endregion
//#region autodiff
// From Evaluator
export const val = (v) => ({
    tag: "Val",
    contents: v,
});
export const linePts = ({ start, end, }) => [start.contents, end.contents];
export const getStart = ({ start }) => start.contents;
export const getEnd = ({ end }) => end.contents;
//#endregion
//#region either monad
export function isLeft(val) {
    return val.tag === "Left";
}
export function isRight(val) {
    return val.tag === "Right";
}
export function toLeft(val) {
    return { contents: val, tag: "Left" };
}
export function toRight(val) {
    return { contents: val, tag: "Right" };
}
export function ToLeft(val) {
    return { contents: val, tag: "Left" };
}
export function ToRight(val) {
    return { contents: val, tag: "Right" };
}
export function foldM(xs, f, init) {
    let res = init;
    let resW = toRight(init); // wrapped
    for (let i = 0; i < xs.length; i++) {
        resW = f(res, xs[i], i);
        if (resW.tag === "Left") {
            return resW;
        } // Stop fold early on first error and return it
        res = resW.contents;
    }
    return resW;
}
/**
 * Gets the string value of a property.  If the property cannot be converted
 * to a string, throw an exception.
 *
 * @param prop Get the string value of this property
 * @param dft Optional default value (if you don't want an exception)
 * @returns string value of the property
 */
export const getAdValueAsString = (prop, dft) => {
    switch (prop.tag) {
        case "FloatV":
            if (typeof prop.contents === "number")
                return prop.contents.toString();
            break;
        case "StrV":
            return prop.contents;
    }
    if (dft !== undefined)
        return dft;
    throw new Error(`getAdValueAsString: unexpected tag ${prop.tag} w/value ${JSON.stringify(prop.contents)}`);
};
/**
 * Gets the contents of a value as a list of ShapeADs.
 * If unable, throw an exception.
 */
export const getValueAsShapeList = (val) => {
    if (val.tag === "ShapeListV")
        return val.contents;
    throw new Error("Not a list of shapes");
};
export const toErrorLoc = (node) => {
    return {
        type: node.nodeType,
        range: {
            start: node.start,
            end: node.end,
        },
    };
};
export const locOrNone = (node) => {
    if (isConcrete(node)) {
        return [toErrorLoc(node)];
    }
    else
        return [];
};
export const allWarnings = [
    "BBoxApproximationWarning",
    "GroupCycleWarning",
    "ImplicitOverrideWarning",
    "LayerCycleWarning",
    "NoopDeleteWarning",
    "ShapeBelongsToMultipleGroups",
];
// If this fails to compile, then allWarnings and the actual tags of
// StyleWarning variants are different.
const _warningTagsCheck = true;
//#endregion
//#region functions
export const noWarn = (value) => ({
    value,
    warnings: [],
});
export const noWarnFn = (f) => {
    return (...args) => noWarn(f(...args));
};
//#endregion
//# sourceMappingURL=Util.js.map