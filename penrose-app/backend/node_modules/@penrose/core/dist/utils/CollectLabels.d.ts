import { Shape } from "../shapes/Shapes.js";
import { Text } from "../shapes/Text.js";
import * as ad from "../types/ad.js";
import { PenroseError } from "../types/errors.js";
import { LabelCache, State } from "../types/state.js";
import { Result } from "./Error.js";
export declare const mathjaxInit: () => (input: string) => Result<HTMLElement, string>;
/**
 * Get the CSS string for the font setting of a `Text` shape.
 * @param shape A text shape
 *
 * NOTE: the `font` CSS rule -> https://developer.mozilla.org/en-US/docs/Web/CSS/font
 *
 * @returns a CSS rule string of its font settings
 */
export declare const toFontRule: <T>(properties: Text<T>) => string;
export declare const collectLabels: (allShapes: Shape<ad.Num>[], convert: (input: string) => Result<HTMLElement, string>) => Promise<Result<LabelCache, PenroseError>>;
export type TextMeasurement = {
    width: number;
    height: number;
    actualDescent: number;
    actualAscent: number;
};
/**
 *
 * @param text the content of the text
 * @param font the CSS font rule for the text
 *
 * NOTE: the `font` CSS rule -> https://developer.mozilla.org/en-US/docs/Web/CSS/font
 * @returns `TextMeasurement` object and includes data such as `width` and `height` of the text.
 */
export declare function measureText(text: string, font: string): TextMeasurement;
export declare const insertPending: (state: State) => State;
//# sourceMappingURL=CollectLabels.d.ts.map