import { BoolV, ColorV, FloatV, PtListV, StrV, VectorV } from "./value.js";
export interface Named<T> {
    name: StrV;
    ensureOnCanvas: BoolV;
}
export interface Stroke<T> {
    strokeWidth: FloatV<T>;
    strokeStyle: StrV;
    strokeColor: ColorV<T>;
    strokeDasharray: StrV;
}
export interface Fill<T> {
    fillColor: ColorV<T>;
}
export interface Center<T> {
    center: VectorV<T>;
}
export interface Rect<T> {
    width: FloatV<T>;
    height: FloatV<T>;
}
export interface Arrow<T> {
    startArrowheadSize: FloatV<T>;
    endArrowheadSize: FloatV<T>;
    startArrowhead: StrV;
    endArrowhead: StrV;
    flipStartArrowhead: BoolV;
}
export interface Corner<T> {
    cornerRadius: FloatV<T>;
}
export interface Rotate<T> {
    rotation: FloatV<T>;
}
export interface Scale<T> {
    scale: FloatV<T>;
}
export interface Poly<T> {
    points: PtListV<T>;
}
export interface String<T> {
    string: StrV;
    fontSize: StrV;
}
export interface ShapeCommon<T> {
    shapeType: string;
    passthrough: Map<string, CanPassthrough<T>>;
}
export type CanPassthrough<T> = StrV | FloatV<T>;
//# sourceMappingURL=shapes.d.ts.map