import * as ad from "../types/ad.js";
import { ConstrFunc } from "../types/functions.js";
/**
 * All values in the list should be equal
 */
export declare const equivalued: (x: ad.Num[]) => ad.Num;
declare enum CurvatureApproximationMode {
    FiniteDifferences = "FiniteDifferences",
    Angle = "Angle",
    SteinerLineSegment = "SteinerLineSegment",
    SteinerCorner = "SteinerCorner",
    OsculatingCircle = "OsculatingCircle"
}
/**
 * Returns discrete curvature approximation given three consecutive points.
 * For 2D points, all angle-based curvatures are signed. The result is non-negative in all other cases.
 */
export declare const curvature: (p1: ad.Num[], p2: ad.Num[], p3: ad.Num[], mode?: CurvatureApproximationMode) => ad.Num;
/**
 * Returns the total length of polygonal chain given its nodes
 */
export declare const perimeter: (points: ad.Num[][], closed: boolean) => ad.Num;
/**
 * Returns the signed area enclosed by a polygonal chain given its nodes
 */
export declare const signedArea: (points: ad.Num[][], closed: boolean) => ad.Num;
/**
 * Returns the turning number of polygonal chain given its nodes
 */
export declare const turningNumber: (points: ad.Num[][], closed: boolean) => ad.Num;
/**
 * Returns the isoperimetric ratio (perimeter squared divided by enclosed area)
 */
export declare const isoperimetricRatio: (points: ad.Num[][], closed: boolean) => ad.Num;
/**
 * Returns integral of curvature along the curve
 */
export declare const totalCurvature: (points: ad.Num[][], closed: boolean, signed?: boolean) => ad.Num;
/**
 * Returns integral of curvature squared along the curve
 */
export declare const elasticEnergy: (points: ad.Num[][], closed: boolean) => ad.Num;
/**
 * Returns the sum of all line segment lengths raised to `k`
 */
export declare const lengthK: (points: ad.Num[][], closed: boolean, k: number) => ad.Num;
/**
 * Returns the maximum value of curvature along the curve
 */
export declare const maxCurvature: (points: ad.Num[][], closed: boolean) => ad.Num;
/**
 * Returns integral of curvature raised to `p` along the curve
 */
export declare const pElasticEnergy: (points: ad.Num[][], closed: boolean, p?: number) => ad.Num;
/**
 * Inflection energy of an order p
 */
export declare const inflectionEnergy: (points: ad.Num[][], closed: boolean, p: number) => ad.Num;
/**
 * Center of mass of a list of vertices
 */
export declare const centerOfMass: (points: [ad.Num, ad.Num][]) => [ad.Num, ad.Num];
export declare const constrDictCurves: {
    [k: string]: ConstrFunc;
};
/**
 * Returns list of `n` tangent vectors given a list of `n` points.
 */
export declare const tangentVectors: (points: ad.Num[][], closed: boolean) => ad.Num[][];
/**
 * Returns list of `n` normal vectors given a list of `n` points 2D.
 */
export declare const normalVectors2D: (points: ad.Num[][], closed: boolean) => ad.Num[][];
/**
 * Returns list of `n` principal normal vectors given a list of `n` points in 3D.
 */
export declare const principalNormalVectors: (points: ad.Num[][], closed: boolean) => ad.Num[][];
/**
 * Returns list of `n` binormal vectors given a list of `n` points in 3D.
 */
export declare const binormalVectors: (points: ad.Num[][], closed: boolean) => ad.Num[][];
/**
 * Returns list of `n` normal vectors given a list of `n` points.
 * If points are 2D, it calculates a normal vector as a perpendicular vector to the tangent.
 * Otherwise, it calculates the principal normal vector.
 */
export declare const normalVectors: (points: ad.Num[][], closed: boolean) => ad.Num[][];
/**
 * Returns list of `n` curvatures given a list of `n` points.
 */
export declare const curvatures: (points: ad.Num[][], closed: boolean, mode?: CurvatureApproximationMode) => ad.Num[];
/**
 * Return evolute curve from a list of points.
 */
export declare const evoluteCurve: (points: ad.Num[][], closed: boolean) => ad.Num[][];
/**
 * Returns an offset version of the input curve. Each point in the input curve is translated
 * by a constant `magnitude` in the direction of the normal vector.
 */
export declare const offsetCurve: (points: ad.Num[][], closed: boolean, magnitude: ad.Num) => ad.Num[][];
export {};
//# sourceMappingURL=Curves.d.ts.map