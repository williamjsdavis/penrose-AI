import * as BBox from "../engine/BBox.js";
import { Shape } from "../shapes/Shapes.js";
import * as ad from "../types/ad.js";
import { MayWarn } from "../types/functions.js";
/**
 * Return bounding box from any provided shape.
 */
export declare const bboxFromShape: (shape: Shape<ad.Num>) => BBox.BBox;
export declare const bboxPts: (bbox: BBox.BBox) => ad.Pt2[];
export declare const rectPts: (center: ad.Num[], width: ad.Num, height: ad.Num, clockwise?: ad.Num) => ad.Pt2[];
/**
 * Return center of the shape `shape`.
 * For shapes without the property `center`, the center of their bounding box is returned.
 */
export declare const shapeCenter: (s: Shape<ad.Num>) => ad.Pt2;
/**
 * Return vertices of polygon-like shapes.
 */
export declare const polygonLikePoints: (s: Shape<ad.Num>) => ad.Pt2[];
/**
 * Return outward unit normal vector to `lineSegment` with respect to `insidePoint`.
 * @param lineSegment Two points defining the line segment.
 * @param insidePoint Any point inside of the half-plane.
 */
export declare const outwardUnitNormal: (lineSegment: ad.Num[][], insidePoint: ad.Num[]) => ad.Num[];
/**
 * Return the signed distance from the origin to the convex
 * counterclockwise-oriented polygon `p`.
 */
export declare const convexPolygonOriginSignedDistance: (p: ad.Pt2[]) => ad.Num;
/**
 * Return the signed distance from the origin to the Minkowski sum of `rect` and
 * the negative of `line` (that is, `start` and `end` points both multiplied by
 * `-1`).
 */
export declare const rectLineDist: (rx0: ad.Num, ry0: ad.Num, rx1: ad.Num, ry1: ad.Num, lxs: ad.Num, lys: ad.Num, lxe: ad.Num, lye: ad.Num) => ad.Num;
export declare const shapeDistance: (s1: Shape<ad.Num>, s2: Shape<ad.Num>) => MayWarn<ad.Num>;
export declare const shapeDistanceCircles: (c1: ad.Pt2, r1: ad.Num, c2: ad.Pt2, r2: ad.Num) => ad.Num;
export declare const shapeDistanceRects: (rect1: ad.Pt2[], rect2: ad.Pt2[]) => ad.Num;
export declare const shapeDistanceRectLine: (rect: ad.Pt2[], start: ad.Pt2, end: ad.Pt2) => ad.Num;
export declare const shapeDistanceRectlikePolyline: (rect: ad.Pt2[], points: ad.Num[][]) => ad.Num;
export declare const shapeDistancePolys: (pts1: ad.Pt2[], pts2: ad.Pt2[]) => ad.Num;
export declare const shapeDistanceRectCircle: (rect: ad.Pt2[], c: ad.Pt2, r: ad.Num) => ad.Num;
export declare const shapeDistancePolyEllipse: (pts: ad.Pt2[], c: ad.Pt2, rx: ad.Num, ry: ad.Num) => ad.Num;
export declare const shapeDistanceCircleLine: (c: ad.Pt2, r: ad.Num, start: ad.Pt2, end: ad.Pt2) => ad.Num;
export declare const shapeDistanceLines: (start1: ad.Pt2, end1: ad.Pt2, start2: ad.Pt2, end2: ad.Pt2) => ad.Num;
//# sourceMappingURL=Queries.d.ts.map