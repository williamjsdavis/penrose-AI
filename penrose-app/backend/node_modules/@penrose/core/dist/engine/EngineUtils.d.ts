import { Shape } from "../shapes/Shapes.js";
import * as ad from "../types/ad.js";
import { A, ASTNode, ConcreteNode, Identifier, NodeType, SourceLoc } from "../types/ast.js";
import { StyleError } from "../types/errors.js";
import { ShapeFn } from "../types/state.js";
import { Expr, Path } from "../types/style.js";
import { Value } from "../types/value.js";
export declare const wrapErr: (s: string) => StyleError;
export declare const runtimeValueTypeError: (path: Path<A>, expectedType: string, actualType: string) => StyleError;
export declare function mapTuple<T, S>(f: (arg: T) => S, t: T[]): S[];
export declare function mapTupNested<T, S>(f: (arg: T) => S, t: T[][]): S[][];
export declare function mapValueNumeric<T, S>(f: (arg: T) => S, v: Value<T>): Value<S>;
export declare const compileCompGraph: (inputs: ad.Var[], shapes: Shape<ad.Num>[]) => Promise<ShapeFn>;
export declare const dummySourceLoc: () => SourceLoc;
export declare const isConcrete: (node: ASTNode<A>) => node is ConcreteNode;
export declare const dummyIdentifier: (name: string, nodeType: NodeType) => Identifier<A>;
export declare const exprToNumber: (e: Expr<A>) => number;
//# sourceMappingURL=EngineUtils.d.ts.map