import { Shape } from "../shapes/Shapes.js";
import { LabelCache, State } from "../types/state.js";
/**
 * Resolves path references into static strings. Implemented by client
 * since filesystem contexts vary (eg browser vs headless).
 * If path fails to resolve, return undefined
 */
export type PathResolver = (path: string) => Promise<string | undefined>;
export interface RenderProps {
    namespace: string;
    variation: string;
    labels: LabelCache;
    texLabels: boolean;
    canvasSize: [number, number];
    pathResolver: PathResolver;
}
export type InteractiveProps = {
    updateState: (newState: State) => void;
    onDrag: (id: string, dx: number, dy: number) => void;
    parentSVG: SVGSVGElement;
};
/**
 *
 * @param state
 * @param updateState Callback for drag-updated state
 * @param pathResolver Resolves paths to static strings
 * @returns
 */
export declare const toInteractiveSVG: (state: State, updateState: (newState: State) => void, pathResolver: PathResolver, namespace: string) => Promise<SVGSVGElement>;
/**
 * Renders a static SVG of the shapes and labels.
 * @param pathResolver Resolves paths to static strings
 */
export declare const toSVG: (state: State, pathResolver: PathResolver, namespace: string, texLabels?: boolean) => Promise<SVGSVGElement>;
export declare const RenderShape: (shape: Shape<number>, renderProps: RenderProps, interactiveProp?: InteractiveProps) => Promise<SVGElement>;
//# sourceMappingURL=Renderer.d.ts.map