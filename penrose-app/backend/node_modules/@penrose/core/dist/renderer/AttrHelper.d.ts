/**
 * Provides an assortment of utility functions shared across shapes that computes
 * output SVG properties using the optimized shape properties as input.
 */
import { Line } from "../shapes/Line.js";
import { Shape } from "../shapes/Shapes.js";
import { Text } from "../shapes/Text.js";
import { Center, Corner, Fill, Named, Poly, Rect, Rotate, Scale, String as StringProps, Stroke } from "../types/shapes.js";
/**
 * Auto-map to SVG any input properties for which we lack specific logic.
 *
 * Apply a map, AttrMapSvg, to perform any target-specific property name translation,
 * i.e., map from Penrose camel case format to SVG mixed-case/kebab format.  Property names
 * not found in the map are mapped straight across.
 *
 * Note: Right now we are neither validating the SVG property names nor its contents.  The
 * thinking is to add an optional validator to the end of the pipeline at some point rather
 * than implement validation for all passthrough SVG properties inside Penrose.
 *
 * Note: This is an "escape hatch" for "passthrough" SVG properties we don't currently support.
 *
 * Note: SVG property names are case sensitive.
 */
export declare const attrAutoFillSvg: (shape: Shape<number>, elem: SVGElement, attrAlreadyMapped: string[]) => void;
/**
 * Maps fillColor --> fill, fill-opacity
 */
export declare const attrFill: (properties: Fill<number>, elem: SVGElement) => string[];
/**
 * Maps center --> cx, cy
 */
export declare const attrCenter: (properties: Center<number>, canvasSize: [number, number], elem: SVGElement) => string[];
/**
 * Maps scale --> transform
 */
export declare const attrScale: (properties: Scale<number>, elem: SVGElement) => string[];
/**
 * Maps center, width, height --> transform
 */
export declare const attrTransformCoords: (properties: Center<number> & Rect<number>, canvasSize: [number, number], elem: SVGElement) => string[];
/**
 * Maps center, width, height --> x, y
 */
export declare const attrXY: (properties: Center<number> & Rect<number>, canvasSize: [number, number], elem: SVGElement) => string[];
/**
 * Maps center, width, height, rotation --> transform
 *
 * Rotates a GPI by n degrees about a center
 * Note: elem must be `transform`able
 * NOTE: must be called before transform translate coords (matrix rules)
 * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform
 */
export declare const attrRotation: (properties: Rotate<number> & Center<number> & Rect<number>, canvasSize: [number, number], elem: SVGElement) => string[];
/**
 * Maps width, height --> width, height
 */
export declare const attrWH: (properties: Rect<number>, elem: SVGElement | HTMLElement) => string[];
/**
 * Maps cornerRadius --> rx
 */
export declare const attrCornerRadius: (properties: Corner<number>, elem: SVGElement) => string[];
/**
 * Maps string --> new TextNode
 */
export declare const attrString: (properties: StringProps<number>, elem: SVGElement) => string[];
export declare const DASH_ARRAY = "7,5";
/**
 * Maps strokeColor --> stroke, stroke-opacity
 *      strokeWidth --> stroke-width
 *      strokeDasharray, strokeStyle --> stroke-dasharray
 *      strokeLinecap --> stroke-linecap
 */
export declare const attrStroke: (properties: Stroke<number> | Line<number>, elem: SVGElement) => string[];
/**
 * Maps name --> new Title
 */
export declare const attrTitle: (properties: Named<number>, elem: SVGElement) => string[];
/**
 * Maps fontFamily, fontSize, fontStretch, fontStyle, fontVariant, fontWeight, lineHeight -> font
 */
export declare const attrFont: (shape: Text<number>, elem: SVGElement) => string[];
/**
 * Maps points -> points
 */
export declare const attrPolyPoints: (shape: Poly<number>, canvasSize: [number, number], elem: SVGElement) => string[];
//# sourceMappingURL=AttrHelper.d.ts.map