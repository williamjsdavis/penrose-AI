import seedrandom from "seedrandom";
import { variable } from "../engine/Autodiff.js";
import { colorV, floatV, randFloat, vectorV } from "../utils/Util.js";
export const makeCanvas = (width, height) => ({
    width,
    height,
    size: [width, height],
    xRange: [-width / 2, width / 2],
    yRange: [-height / 2, height / 2],
});
/**
 * Return a simple `Context` which starts with a `seedrandom` PRNG seeded with
 * `variation`, and for each `makeInput` invocation, sets `val` by calling the
 * using the given `sampler` or placeholder `pending` value.
 */
export const simpleContext = (variation) => {
    const rng = seedrandom(variation);
    return {
        makeInput: (meta) => variable(meta.init.tag === "Sampled"
            ? meta.init.sampler(rng)
            : meta.init.pending),
    };
};
export const uniform = (min, max) => (rng) => randFloat(rng, min, max);
export const sampleVector = ({ makeInput }, canvas) => vectorV([
    makeInput({
        init: { tag: "Sampled", sampler: uniform(...canvas.xRange) },
        stages: "All",
    }),
    makeInput({
        init: { tag: "Sampled", sampler: uniform(...canvas.yRange) },
        stages: "All",
    }),
]);
export const sampleWidth = ({ makeInput }, canvas) => floatV(makeInput({
    init: { tag: "Sampled", sampler: uniform(3, canvas.width / 6) },
    stages: "All",
}));
export const sampleHeight = ({ makeInput }, canvas) => floatV(makeInput({
    init: { tag: "Sampled", sampler: uniform(3, canvas.height / 6) },
    stages: "All",
}));
export const sampleStroke = ({ makeInput }) => floatV(makeInput({
    init: { tag: "Sampled", sampler: uniform(0.5, 3) },
    stages: "All",
}));
export const sampleColor = ({ makeInput }) => {
    const [min, max] = [0.1, 0.9];
    return colorV({
        tag: "RGBA",
        contents: [
            makeInput({
                init: { tag: "Sampled", sampler: uniform(min, max) },
                stages: "All",
            }),
            makeInput({
                init: { tag: "Sampled", sampler: uniform(min, max) },
                stages: "All",
            }),
            makeInput({
                init: { tag: "Sampled", sampler: uniform(min, max) },
                stages: "All",
            }),
            0.5,
        ],
    });
};
//# sourceMappingURL=Samplers.js.map