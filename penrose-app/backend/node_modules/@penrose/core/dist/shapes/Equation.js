import { black, boolV, floatV, strV, vectorV } from "../utils/Util.js";
import { uniform } from "./Samplers.js";
export const sampleEquation = (context, canvas) => ({
    name: strV("defaultEquation"),
    fillColor: black(),
    center: vectorV([
        context.makeInput({
            init: { tag: "Sampled", sampler: uniform(...canvas.xRange) },
            stages: "All",
        }),
        context.makeInput({
            init: { tag: "Sampled", sampler: uniform(...canvas.yRange) },
            stages: "All",
        }),
    ]),
    width: floatV(context.makeInput({
        init: { tag: "Pending", pending: 0 },
        stages: new Set(),
    })),
    height: floatV(context.makeInput({
        init: { tag: "Pending", pending: 0 },
        stages: new Set(),
    })),
    descent: floatV(context.makeInput({
        init: { tag: "Pending", pending: 0 },
        stages: new Set(),
    })),
    ascent: floatV(context.makeInput({
        init: { tag: "Pending", pending: 0 },
        stages: new Set(),
    })),
    rotation: floatV(0),
    string: strV("defaultLabelText"),
    fontSize: strV("16px"),
    ensureOnCanvas: boolV(true),
});
export const makeEquation = (context, canvas, properties) => ({
    ...sampleEquation(context, canvas),
    ...properties,
    shapeType: "Equation",
    passthrough: new Map(),
});
//# sourceMappingURL=Equation.js.map