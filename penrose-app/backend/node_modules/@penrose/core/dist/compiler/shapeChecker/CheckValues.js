import { Result } from "true-myth";
import { badShapeParamTypeError } from "../../utils/Error.js";
import { val } from "../../utils/Util.js";
const { err, ok } = Result;
export const checkFloatV = (path, value) => {
    if (value.tag === "FloatV") {
        return ok(value);
    }
    return err(badShapeParamTypeError(path, val(value), "FloatV", false));
};
export const checkBoolV = (path, value) => {
    if (value.tag === "BoolV") {
        return ok(value);
    }
    return err(badShapeParamTypeError(path, val(value), "BoolV", false));
};
export const checkStrV = (path, value) => {
    if (value.tag === "StrV") {
        return ok(value);
    }
    return err(badShapeParamTypeError(path, val(value), "StrV", false));
};
export const checkPathDataV = (path, value) => {
    if (value.tag === "PathDataV") {
        return ok(value);
    }
    return err(badShapeParamTypeError(path, val(value), "PathDataV", false));
};
export const checkPtListV = (path, value) => {
    if (value.tag === "PtListV" ||
        value.tag === "LListV" ||
        value.tag === "MatrixV") {
        return ok({ tag: "PtListV", contents: value.contents });
    }
    return err(badShapeParamTypeError(path, val(value), "PtListV (also supports LListV and MatrixV)", false));
};
export const checkColorV = (path, value) => {
    if (value.tag === "ColorV") {
        return ok(value);
    }
    return err(badShapeParamTypeError(path, val(value), "ColorV", false));
};
export const checkListV = (path, value) => {
    if (value.tag === "ListV" ||
        value.tag === "VectorV" ||
        value.tag === "TupV") {
        return ok({ tag: "ListV", contents: value.contents });
    }
    return err(badShapeParamTypeError(path, val(value), "ListV (also supports VectorV and TupV)", false));
};
export const checkVectorV = (path, value) => {
    if (value.tag === "VectorV" ||
        value.tag === "ListV" ||
        value.tag === "TupV") {
        return ok({ tag: "VectorV", contents: value.contents });
    }
    return err(badShapeParamTypeError(path, val(value), "VectorV (also supports ListV and TupV)", false));
};
export const checkMatrixV = (path, value) => {
    if (value.tag === "MatrixV" ||
        value.tag === "LListV" ||
        value.tag === "PtListV") {
        return ok({ tag: "MatrixV", contents: value.contents });
    }
    return err(badShapeParamTypeError(path, val(value), "MatrixV (also supports LListV and PtListV)", false));
};
export const checkTupV = (path, value) => {
    if (value.tag === "TupV") {
        return ok(value);
    }
    return err(badShapeParamTypeError(path, val(value), "TupV", false));
};
export const checkLListV = (path, value) => {
    if (value.tag === "LListV" ||
        value.tag === "MatrixV" ||
        value.tag === "PtListV") {
        return ok({ tag: "LListV", contents: value.contents });
    }
    return err(badShapeParamTypeError(path, val(value), "LListV (also supports MatrixV and PtListV)", false));
};
export const checkShapeListV = (path, value) => {
    if (value.tag === "ShapeListV") {
        return ok(value);
    }
    return err(badShapeParamTypeError(path, val(value), "ShapeListV", false));
};
export const checkClipDataV = (path, value) => {
    if (value.tag === "ClipDataV") {
        return ok(value);
    }
    return err(badShapeParamTypeError(path, val(value), "ClipDataV", false));
};
//# sourceMappingURL=CheckValues.js.map