import { Result } from "true-myth";
import { internalMissingPathError } from "../Style.js";
import { checkBoolV, checkColorV, checkFloatV, checkPtListV, checkStrV, checkVectorV, } from "./CheckValues.js";
const { err, ok } = Result;
const getTransProp = (path, trans) => {
    const v = trans.symbols.get(path);
    if (v === undefined || v.tag !== "Val") {
        throw internalMissingPathError(path);
    }
    return v.contents;
};
export const checkProp = (path, prop, trans, checker) => {
    const propP = `${path}.${prop}`;
    const propV = getTransProp(propP, trans);
    return checker(propP, propV);
};
export const checkNamed = (path, trans) => {
    const name = checkProp(path, "name", trans, checkStrV);
    if (name.isErr())
        return err(name.error);
    const ensureOnCanvas = checkProp(path, "ensureOnCanvas", trans, checkBoolV);
    if (ensureOnCanvas.isErr())
        return err(ensureOnCanvas.error);
    return ok({
        name: name.value,
        ensureOnCanvas: ensureOnCanvas.value,
    });
};
export const checkStroke = (path, trans) => {
    const strokeWidth = checkProp(path, "strokeWidth", trans, checkFloatV);
    if (strokeWidth.isErr())
        return err(strokeWidth.error);
    const strokeStyle = checkProp(path, "strokeStyle", trans, checkStrV);
    if (strokeStyle.isErr())
        return err(strokeStyle.error);
    const strokeColor = checkProp(path, "strokeColor", trans, checkColorV);
    if (strokeColor.isErr())
        return err(strokeColor.error);
    const strokeDasharray = checkProp(path, "strokeDasharray", trans, checkStrV);
    if (strokeDasharray.isErr())
        return err(strokeDasharray.error);
    return ok({
        strokeWidth: strokeWidth.value,
        strokeStyle: strokeStyle.value,
        strokeColor: strokeColor.value,
        strokeDasharray: strokeDasharray.value,
    });
};
export const checkFill = (path, trans) => {
    const fillColor = checkProp(path, "fillColor", trans, checkColorV);
    if (fillColor.isErr())
        return err(fillColor.error);
    return ok({ fillColor: fillColor.value });
};
export const checkCenter = (path, trans) => {
    const center = checkProp(path, "center", trans, checkVectorV);
    if (center.isErr())
        return err(center.error);
    return ok({ center: center.value });
};
export const checkRect = (path, trans) => {
    const width = checkProp(path, "width", trans, checkFloatV);
    if (width.isErr())
        return err(width.error);
    const height = checkProp(path, "height", trans, checkFloatV);
    if (height.isErr())
        return err(height.error);
    return ok({ width: width.value, height: height.value });
};
export const checkArrow = (path, trans) => {
    const startArrowheadSize = checkProp(path, "startArrowheadSize", trans, checkFloatV);
    if (startArrowheadSize.isErr())
        return err(startArrowheadSize.error);
    const endArrowheadSize = checkProp(path, "endArrowheadSize", trans, checkFloatV);
    if (endArrowheadSize.isErr())
        return err(endArrowheadSize.error);
    const startArrowhead = checkProp(path, "startArrowhead", trans, checkStrV);
    if (startArrowhead.isErr())
        return err(startArrowhead.error);
    const endArrowhead = checkProp(path, "endArrowhead", trans, checkStrV);
    if (endArrowhead.isErr())
        return err(endArrowhead.error);
    const flipStartArrowhead = checkProp(path, "flipStartArrowhead", trans, checkBoolV);
    if (flipStartArrowhead.isErr())
        return err(flipStartArrowhead.error);
    return ok({
        startArrowheadSize: startArrowheadSize.value,
        endArrowheadSize: endArrowheadSize.value,
        startArrowhead: startArrowhead.value,
        endArrowhead: endArrowhead.value,
        flipStartArrowhead: flipStartArrowhead.value,
    });
};
export const checkCorner = (path, trans) => {
    const cornerRadius = checkProp(path, "cornerRadius", trans, checkFloatV);
    if (cornerRadius.isErr())
        return err(cornerRadius.error);
    return ok({ cornerRadius: cornerRadius.value });
};
export const checkRotate = (path, trans) => {
    const rotation = checkProp(path, "rotation", trans, checkFloatV);
    if (rotation.isErr())
        return err(rotation.error);
    return ok({ rotation: rotation.value });
};
export const checkScale = (path, trans) => {
    const scale = checkProp(path, "scale", trans, checkFloatV);
    if (scale.isErr())
        return err(scale.error);
    return ok({ scale: scale.value });
};
export const checkPoly = (path, trans) => {
    const points = checkProp(path, "points", trans, checkPtListV);
    if (points.isErr())
        return err(points.error);
    return ok({ points: points.value });
};
export const checkString = (path, trans) => {
    const string = checkProp(path, "string", trans, checkStrV);
    if (string.isErr())
        return err(string.error);
    const fontSize = checkProp(path, "fontSize", trans, checkStrV);
    if (fontSize.isErr())
        return err(fontSize.error);
    return ok({
        string: string.value,
        fontSize: fontSize.value,
    });
};
// Not checking shapeType since shapeType is *not* in Translation.
//# sourceMappingURL=CheckShapeHierarchyProps.js.map