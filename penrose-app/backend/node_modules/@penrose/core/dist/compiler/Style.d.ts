import im from "immutable";
import { Canvas, InputMeta, Context as MutableContext } from "../shapes/Samplers.js";
import { A, C } from "../types/ast.js";
import { Env } from "../types/domain.js";
import { LayerCycleWarning, MultipleLayoutError, ParseError, PenroseError, StyleError, StyleWarning } from "../types/errors.js";
import { Fn, OptPipeline, StagedConstraints, State } from "../types/state.js";
import { List, RelationPattern, StyProg } from "../types/style.js";
import { Assignment, DepGraph, Layer, SelEnv, Subst, Translation } from "../types/styleSemantics.js";
import { SubstanceEnv } from "../types/substance.js";
import { Result } from "../utils/Error.js";
import Graph from "../utils/Graph.js";
import { GroupGraph } from "../utils/GroupGraph.js";
export declare function numbered<A>(xs: A[]): [A, number][];
export declare const ppRel: (r: RelationPattern<A>) => string;
export declare const fullSubst: (selEnv: SelEnv, subst: Subst) => boolean;
export declare const uniqueKeysAndVals: (subst: Subst) => boolean;
export declare const substituteRel: (subst: Subst, rel: RelationPattern<A>) => RelationPattern<A>;
export declare const buildAssignment: (varEnv: Env, subEnv: SubstanceEnv, styProg: StyProg<C>) => Assignment;
export declare const gatherDependencies: (assignment: Assignment) => DepGraph;
export declare const internalMissingPathError: (path: string) => Error;
export declare const translate: (mut: MutableContext, canvas: Canvas, stages: OptPipeline, graph: DepGraph, warnings: im.List<StyleWarning>) => Translation;
export declare const checkGroupGraph: (groupGraph: GroupGraph) => StyleWarning[];
export type LayerGraph = Graph<string>;
export declare const processLayering: ({ below, above }: Layer, groupGraph: GroupGraph, layerGraph: LayerGraph) => void;
export declare const computeLayerOrdering: (allGPINames: string[], partialOrderings: Layer[], groupGraph: GroupGraph) => {
    shapeOrdering: string[];
    warning?: LayerCycleWarning;
};
export declare const getCanvasDim: (attr: "width" | "height", graph: DepGraph) => Result<number, StyleError>;
export declare const parseStyle: (p: string) => Result<StyProg<C>, ParseError>;
export declare const getLayoutStages: (prog: StyProg<C>) => Result<OptPipeline, MultipleLayoutError>;
export declare const stageConstraints: (inputs: InputMeta[], constrFns: Fn[], objFns: Fn[], stages: OptPipeline) => StagedConstraints;
export declare const compileStyleHelper: (variation: string, stySource: string, subEnv: SubstanceEnv, varEnv: Env) => Promise<Result<{
    state: State;
    translation: Translation;
    assignment: Assignment;
    styleAST: StyProg<C>;
    graph: DepGraph;
}, PenroseError>>;
export declare const compileStyle: (variation: string, stySource: string, excludeWarnings: string[], subEnv: SubstanceEnv, varEnv: Env) => Promise<Result<State, PenroseError>>;
//# sourceMappingURL=Style.d.ts.map