import { elasticEnergy, equivalued, perimeter } from "./contrib/Curves.js";
import { signedDistanceRect } from "./contrib/Functions.js";
import { rectPts } from "./contrib/Queries.js";
import { consecutiveTuples } from "./contrib/Utils.js";
import { variable } from "./engine/Autodiff.js";
import { pow, sub } from "./engine/AutodiffFunctions.js";
import * as ad from "./types/ad.js";
import { TextMeasurement, measureText } from "./utils/CollectLabels.js";
interface Rect {
    center: ad.Num[];
    width: ad.Num;
    height: ad.Num;
}
export declare const textBBox: (measure: TextMeasurement, x: ad.Num, y: ad.Num) => Rect;
export declare const eq: (a: ad.Num, b: ad.Num) => ad.Num;
export declare const dist: (a: ad.Num[], b: ad.Num[]) => ad.Num;
export declare const onCanvasRect: ([canvasWidth, canvasHeight]: [ad.Num, ad.Num], { center: [x, y], width, height }: Rect) => ad.Num;
export declare const onCanvasPoint: ([x, y]: ad.Num[], canvas: [ad.Num, ad.Num]) => ad.Num;
export declare const lessThan: (x: ad.Num, y: ad.Num) => ad.Num;
export { convexPolygonMinkowskiSDF } from "./contrib/Minkowski.js";
export { compile, ops, problem } from "./engine/Autodiff.js";
export * from "./engine/AutodiffFunctions.js";
export { corners } from "./engine/BBox.js";
export type { BBox } from "./engine/BBox.js";
export type { Binary, Bool, Comp, Config, Description, Expr, Index, Logic, Nary, Not, Num, Options, PolyRoots, Problem, Run, Ternary, Unary, Var, Vec, } from "./types/ad.js";
export { consecutiveTuples, elasticEnergy, equivalued, measureText, perimeter, pow, rectPts, signedDistanceRect, sub, variable, };
//# sourceMappingURL=api.d.ts.map